(o == (func (f g) (func x (f (g x)))))
(lun t == ((run o inv) t))
(bun t == ((run t) and (lun t)))
(x Rm t == (x member (rng t)))
(x Lm t == (x member (dom t)))
(mem t == ((dom t) cup (rng t)))
(term t == ((rng t) \ (dom t)))
(x Mm t == (x member (mem t)))
(init t == ((dom t) \ (rng t)))
(t <- p == ((p o tl) filter t))
(p -> t == ((p o hd) filter t))
(t restr p == ((p -> t) <- p))
(t ; u == (t cup (((dom u) \ (dom t)) -> u)))
(alpha t == ((theta o init) t))
(omega t == ((theta o term) t))
(ALPHA s == (s <- (rsec nomem (term s))))
(OMEGA t == ((rsec nomem (init t)) -> t))
(x cl t == ((rel (x : (alpha t))) cup t))
(t cr x == (t cup (rel ((omega t) : x))))
(f @ x == (f x))
(x , y == (list x y))
(|| == (func (f g) (func (x y) (list (f x) (g y)))))
(I x == x)
(wig p == (not o p))
(DELTA x == (list x x))
(phi == (lsec I ||))
(delta == (rsec || I))
(f while p == (if p -> (iter p -> f) ; I))
(PI f == (delta (lsec f ,)))
(upsilon f == ((op @) o (I || f)))
(t extend f == (if (rsec member (dom t)) -> (lsec t sel) ; f))
(s restrict f == (((op :) o ((I || f) o DELTA)) img s))
(x index t == (((rsec sel x) (: bar) I) img t))
(t @hat x == ((hd (: bar) ((rsec @ x) o tl)) img t))
(t ! x == ((rsec @ x) $ t))
(mu t == (t \ (t | (t sup +))))
(p xi r == (mu ((r sup +) restr p)))
(t PHIaux s == ((s sel 1) , ((rsec Lm t) xi (s sel 2))))
(p PHI s == (((s sel 1) <- p) PHIaux s))
(ssm t == ((unc o (rsec sa 1)) ((rsec sa 1) $ t)))
(y all t == ((inv t) unimg y))
(x select d == (rng o (rsec -> (x index d))))
(x join dp == (((lsec (cup o (hd (, bar) tl)) img) o (((rsec sel 1) (| bar) (rsec sel 2)) o ((inv || I
) o ((lsec x index) || (lsec x index))))) dp))
(curry f == (func x (func y (f (x , y)))))
(uncurry f == (func (x y) ((f x) y)))
EOF
